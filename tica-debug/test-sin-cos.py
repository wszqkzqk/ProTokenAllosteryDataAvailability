#!/usr/bin/env python3

# --- START OF FILE plot_feature_histograms.py ---
import numpy as np
import matplotlib.pyplot as plt
import argparse
import os
import sys

def plot_feature_histograms(features_file, num_pairs_to_plot=3, output_file="feature_histograms.png"):
    """
    Loads features (sin/cos pairs) from an .npy file and plots histograms
    for the first few sin/cos pairs.

    Args:
        features_file (str): Path to the _features_data.npy file.
        num_pairs_to_plot (int): How many initial pairs (sin/cos) to plot.
        output_file (str): Path to save the output plot.
    """
    print(f"Loading features from: {features_file}")
    if not os.path.exists(features_file):
        print(f"Error: Features file not found at '{features_file}'", file=sys.stderr)
        sys.exit(1)

    try:
        features = np.load(features_file)
        print(f"Loaded features shape: {features.shape}")

        if features.ndim != 2 or features.shape[1] % 2 != 0:
            print(f"Warning: Expected features to be a 2D array with an even number of columns (sin/cos pairs). Shape is {features.shape}. Attempting to plot first columns anyway.", file=sys.stderr)
            num_total_features = features.shape[1]
        else:
             num_total_features = features.shape[1]
             num_total_pairs = num_total_features // 2
             print(f"Found {num_total_features} features, corresponding to {num_total_pairs} angle pairs.")

        if num_total_features == 0:
             print("Error: Feature file contains no data.", file=sys.stderr)
             sys.exit(1)

        # Determine how many features (columns) to plot based on pairs requested
        num_features_to_plot = min(num_total_features, num_pairs_to_plot * 2)
        actual_num_pairs = num_features_to_plot // 2 # Number of full pairs we can plot

        if actual_num_pairs == 0:
            print("Warning: Not enough features to plot even one sin/cos pair.")
            # Fallback: plot first feature if available
            if num_total_features >= 1:
                num_features_to_plot = 1
            else:
                print("No features to plot.")
                return

        print(f"Plotting histograms for the first {actual_num_pairs} sin/cos pairs (Features 0 to {num_features_to_plot-1})...")

        # Create subplots: one row per pair, two columns (sin, cos)
        fig, axes = plt.subplots(actual_num_pairs, 2, figsize=(10, 3 * actual_num_pairs), squeeze=False) # Ensure axes is always 2D array

        bins = 50 # Number of bins for histogram

        for i in range(actual_num_pairs):
            sin_col_index = i * 2
            cos_col_index = i * 2 + 1

            # Plot sin histogram
            ax_sin = axes[i, 0]
            sin_data = features[:, sin_col_index]
            ax_sin.hist(sin_data, bins=bins, density=True, alpha=0.7, label=f'Feature {sin_col_index} (sin)')
            ax_sin.set_title(f'Feature {sin_col_index} (Assumed Sin)')
            ax_sin.set_xlabel("Value")
            ax_sin.set_ylabel("Density")
            ax_sin.set_xlim(-1.1, 1.1) # Expect range [-1, 1]
            ax_sin.grid(True, alpha=0.3)

            # Plot cos histogram
            ax_cos = axes[i, 1]
            cos_data = features[:, cos_col_index]
            ax_cos.hist(cos_data, bins=bins, density=True, alpha=0.7, label=f'Feature {cos_col_index} (cos)')
            ax_cos.set_title(f'Feature {cos_col_index} (Assumed Cos)')
            ax_cos.set_xlabel("Value")
            # ax_cos.set_ylabel("Density") # Removed for clarity, shared axis conceptually
            ax_cos.set_xlim(-1.1, 1.1) # Expect range [-1, 1]
            ax_cos.grid(True, alpha=0.3)

        fig.suptitle(f"Histograms of First {actual_num_pairs} sin/cos Feature Pairs", fontsize=14)
        fig.tight_layout(rect=[0, 0.03, 1, 0.96]) # Adjust layout

        plt.savefig(output_file)
        print(f"Saved feature histogram plot to: {output_file}")
        plt.close(fig)

    except Exception as e:
        print(f"An error occurred during plotting: {e}", file=sys.stderr)
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Plot histograms for sin/cos feature pairs from a .npy file generated by TICA preprocessing.",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    parser.add_argument(
        "features_file",
        help="Path to the features data file (.npy) containing sin/cos values."
    )
    parser.add_argument(
        "-n", "--num_pairs", type=int, default=3,
        help="Number of initial sin/cos pairs to plot histograms for."
    )
    parser.add_argument(
        "-o", "--output_file", default="feature_histograms.png",
        help="Filename for the output histogram plot."
    )

    if len(sys.argv) == 1:
        parser.print_help(sys.stderr)
        sys.exit(1)

    args = parser.parse_args()

    if args.num_pairs <= 0:
         print("Error: --num_pairs must be positive.", file=sys.stderr)
         sys.exit(1)

    plot_feature_histograms(args.features_file, args.num_pairs, args.output_file)
# --- END OF FILE plot_feature_histograms.py ---
